/***********************************************************************************************
* [Foxetron_AngleController_LCD.h]: HD44780 LCD DISPLAY MODULE VIA I2C; LARGE FONT SUPPORT
*
* This file is part of the Foxetron program suite
* Copyright © 2016 Thomas J. Biuso III  ALL RIGHTS RESERVED...WHATEVER THAT MEANS.
* RELEASED UNDER THE GPL v3.0 LICENSE; SEE <LICENSE> FILE WITHIN DISTRIBUTION ROOT FOR TERMS.
***********************************************************************************************/

#pragma GCC diagnostic ignored "-Wparentheses"

#ifndef _FOXETRON_LCD_H
#define _FOXETRON_LCD_H


#pragma region INCLUDES

// ITTY BITTY
#include "IttyBitty_print.h"

using namespace IttyBitty;

// PROJECT INCLUDES
#include "Foxetron_AngleController_LCD_chars.h"
#include "Foxetron_AngleController_pins.h"

// PROJECT LIBS
#include "libs/BigCrystal_I2C.custom.h"

// AVR LibC
//#include <avr/pgmspace.h>						// included by project 3rd-party libs

#pragma endregion


#pragma region DEFINES

// LCD OPTIONS/CONSTANTS

#define LCD_I2C_ADDRESS			0x27

#define LCD_COLS				20
#define LCD_ROWS				4

#define LCD_CHAR_HEIGHT			8
#define LCD_CHAR_WIDTH			5

#pragma endregion


#pragma region LCD GLOBAL VARIABLE DECLARATION

// LCD display
EXTERN BigCrystal_I2C * LCD;

#pragma endregion


#pragma region PROGRAM FUNCTION DECLARATIONS

VOID LCD_Initialize();
VOID LCD_Free();

#pragma endregion


namespace Foxetron
{
#pragma region LCD SCROLLBAR ENUMS

	enum LcdScrollBarIndicator : BYTE
	{
		LINE_INDICATOR = 0x00,
		BLOCK_INDICATOR = 0x10
	};

	TYPEDEF_ENUM_ALIASES(LcdScrollBarIndicator, LCDSCROLLBARINDICATOR);


	enum LcdScrollBarPosition : BYTE
	{
		RIGHT_POSITION = 0x0,
		LEFT_POSITION = 0x1
	};

	TYPEDEF_ENUM_ALIASES(LcdScrollBarPosition, LCDSCROLLBARPOSITION);


	ENUM LcdScrollBarOptions : BYTE
	{
		LINE = LINE_INDICATOR BOR RIGHT_POSITION,
		LINE_LEFT = LINE_INDICATOR BOR LEFT_POSITION,

		BLOCK = BLOCK_INDICATOR BOR RIGHT_POSITION,
		BLOCK_LEFT = BLOCK_INDICATOR BOR LEFT_POSITION
	};

	TYPEDEF_ENUM_ALIASES(LcdScrollBarOptions, LCDSCROLLBAROPTIONS);



	STATIC CLCDSCROLLBARINDICATOR LcdScrollBarOptionsToLcdScrollBarIndicator(CLCDSCROLLBAROPTIONS lcdScrollBarOptions)
	{
		return static_cast<CLCDSCROLLBARINDICATOR>(HIGH_NYBBLE((CBYTE)lcdScrollBarOptions));
	}

	STATIC CLCDSCROLLBARPOSITION LcdScrollBarOptionsToLcdScrollBarPosition(CLCDSCROLLBAROPTIONS lcdScrollBarOptions)
	{
		return static_cast<CLCDSCROLLBARPOSITION>(LOW_NYBBLE((CBYTE)lcdScrollBarOptions));
	}

#pragma endregion


#pragma region LCD GRAPH ENUMS

	// Also used for LCD Slider...
	enum LcdSpaceStyle : BYTE
	{
		EMPTY_SPACE		= 0x0,
		DASH_SPACE		= 0x1,
		PLUS_SPACE		= 0x2,
		SQUARE_SPACE	= 0x3,
		DIAMOND_SPACE	= 0x4,
		CIRCLE_SPACE	= 0x5,
		LINES_SPACE		= 0x6,
		DOTS_SPACE		= 0x7
	};

	TYPEDEF_ENUM_ALIASES(LcdSpaceStyle, LCDSPACETYLE);


	enum LcdGraphCell : BYTE
	{
		BLOCK_CELL		= 0x00,
		LINE_CELL		= 0x10,
		PLUS_CELL		= 0x20,
		SQUARE_CELL		= 0x30,
		DIAMOND_CELL	= 0x40,
		DISC_CELL		= 0x50,
		STRIPES_CELL	= 0x60
	};

	TYPEDEF_ENUM_ALIASES(LcdGraphCell, LCDGRAPHCELL);


	enum LcdGraphPartialStyle : BYTE
	{
		NORMAL_PARTIAL		= 0x00,
		SEMI_FILL_PARTIAL	= 0x80
	};

	TYPEDEF_ENUM_ALIASES(LcdGraphPartialStyle, LCDGRAPHPARTIALSTYLE);


	ENUM LcdGraphOptions : BYTE
	{
		BAR						= BLOCK_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		BAR_DASH				= BLOCK_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		BAR_PLUS				= BLOCK_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		BAR_SQUARE				= BLOCK_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		BAR_DIAMOND				= BLOCK_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		BAR_CIRCLE				= BLOCK_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		BAR_LINES				= BLOCK_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		BAR_DOTS				= BLOCK_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		BAR_SEMI				= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		BAR_DASH_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		BAR_PLUS_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		BAR_SQUARE_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		BAR_DIAMOND_SEMI		= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		BAR_CIRCLE_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		BAR_LINES_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		BAR_DOTS_SEMI			= BLOCK_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		LINE					= LINE_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		LINE_DASH				= LINE_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		LINE_PLUS				= LINE_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		LINE_SQUARE				= LINE_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		LINE_DIAMOND			= LINE_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		LINE_CIRCLE				= LINE_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		LINE_LINES				= LINE_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		LINES					= LINE_LINES,
		LINE_DOTS				= LINE_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		LINE_SEMI				= LINE_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		LINE_DASH_SEMI			= LINE_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		LINE_PLUS_SEMI			= LINE_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		LINE_SQUARE_SEMI		= LINE_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		LINE_DIAMOND_SEMI		= LINE_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		LINE_CIRCLE_SEMI		= LINE_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		LINE_LINES_SEMI			= LINE_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		LINES_SEMI				= LINE_LINES_SEMI,
		LINE_DOTS_SEMI			= LINE_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		PLUS					= PLUS_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		PLUS_DASH				= PLUS_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		//PLUS_PLUS				= PLUS_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		PLUS_SQUARE				= PLUS_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		PLUS_DIAMOND			= PLUS_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		FILLED_DIAMOND			= PLUS_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		PLUS_CIRCLE				= PLUS_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		PLUS_LINES				= PLUS_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		PLUS_DOTS				= PLUS_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		PLUS_SEMI				= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		PLUS_DASH_SEMI			= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		//PLUS_PLUS_SEMI			= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		PLUS_SQUARE_SEMI		= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		PLUS_DIAMOND_SEMI		= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		FILLED_DIAMOND_SEMI		= PLUS_DIAMOND_SEMI,
		PLUS_CIRCLE_SEMI		= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		PLUS_LINES_SEMI			= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		PLUS_DOTS_SEMI			= PLUS_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		SQUARE					= SQUARE_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		SQUARE_DASH				= SQUARE_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		SQUARE_PLUS				= SQUARE_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		SQUARE_SQUARE			= SQUARE_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		SQUARES					= SQUARE_SQUARE,
		SQUARE_DIAMOND			= SQUARE_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		SQUARE_CIRCLE			= SQUARE_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		FILLED_CIRCLE			= SQUARE_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		SQUARE_LINES			= SQUARE_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		SQUARE_DOTS				= SQUARE_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		SQUARE_SEMI				= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		SQUARE_DASH_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		SQUARE_PLUS_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		SQUARE_SQUARE_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		SQUARES_SEMI			= SQUARE_SQUARE_SEMI,
		SQUARE_DIAMOND_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		SQUARE_CIRCLE_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		FILLED_CIRCLE_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		SQUARE_LINES_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		SQUARE_DOTS_SEMI		= SQUARE_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		DIAMOND					= DIAMOND_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		DIAMOND_DASH			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		DIAMOND_PLUS			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		DIAMOND_SQUARE			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		DIAMOND_DIAMOND			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		DIAMONDS				= DIAMOND_DIAMOND,
		DIAMOND_CIRCLE			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		DIAMOND_LINES			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		DIAMOND_DOTS			= DIAMOND_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		DIAMOND_SEMI			= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		DIAMOND_DASH_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		DIAMOND_PLUS_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		DIAMOND_SQUARE_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		DIAMOND_DIAMOND_SEMI	= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		DIAMONDS_SEMI			= DIAMOND_DIAMOND_SEMI,
		DIAMOND_CIRCLE_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		DIAMOND_LINES_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		DIAMOND_DOTS_SEMI		= DIAMOND_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		DISC					= DISC_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		DISC_DASH				= DISC_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		DISC_PLUS				= DISC_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		DISC_SQUARE				= DISC_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		DISC_DIAMOND			= DISC_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		DISC_CIRCLE				= DISC_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		CIRCLES					= DISC_CIRCLE,
		DISC_LINES				= DISC_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		DISC_DOTS				= DISC_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		DISC_SEMI				= DISC_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		DISC_DASH_SEMI			= DISC_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		DISC_PLUS_SEMI			= DISC_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		DISC_SQUARE_SEMI		= DISC_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		DISC_DIAMOND_SEMI		= DISC_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		DISC_CIRCLE_SEMI		= DISC_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		CIRCLES_SEMI			= DISC_CIRCLE_SEMI,
		DISC_LINES_SEMI			= DISC_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		DISC_DOTS_SEMI			= DISC_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE,

		STRIPES					= STRIPES_CELL BOR NORMAL_PARTIAL BOR EMPTY_SPACE,
		STRIPES_DASH			= STRIPES_CELL BOR NORMAL_PARTIAL BOR DASH_SPACE,
		STRIPES_PLUS			= STRIPES_CELL BOR NORMAL_PARTIAL BOR PLUS_SPACE,
		STRIPES_SQUARE			= STRIPES_CELL BOR NORMAL_PARTIAL BOR SQUARE_SPACE,
		STRIPES_DIAMOND			= STRIPES_CELL BOR NORMAL_PARTIAL BOR DIAMOND_SPACE,
		STRIPES_CIRCLE			= STRIPES_CELL BOR NORMAL_PARTIAL BOR CIRCLE_SPACE,
		STRIPES_LINES			= STRIPES_CELL BOR NORMAL_PARTIAL BOR LINES_SPACE,
		STRIPES_DOTS			= STRIPES_CELL BOR NORMAL_PARTIAL BOR DOTS_SPACE,

		STRIPES_SEMI			= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR EMPTY_SPACE,
		STRIPES_DASH_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR DASH_SPACE,
		STRIPES_PLUS_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR PLUS_SPACE,
		STRIPES_SQUARE_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR SQUARE_SPACE,
		STRIPES_DIAMOND_SEMI	= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR DIAMOND_SPACE,
		STRIPES_CIRCLE_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR CIRCLE_SPACE,
		STRIPES_LINES_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR LINES_SPACE,
		STRIPES_DOTS_SEMI		= STRIPES_CELL BOR SEMI_FILL_PARTIAL BOR DOTS_SPACE
	};

	TYPEDEF_ENUM_ALIASES(LcdGraphOptions, LCDGRAPHOPTIONS);


	#define LCD_GRAPH_PARTIAL_CELL_STYLE_MASK	0x80

	STATIC CLCDGRAPHCELL LcdGraphOptionsToLcdGraphCell(CLCDGRAPHOPTIONS lcdGraphOptions)
	{
		return static_cast<CLCDGRAPHCELL>(HIGH_NYBBLE(
			INVERSE_MASK((CBYTE)lcdGraphOptions, (CBYTE)LCD_GRAPH_PARTIAL_CELL_STYLE_MASK)));
	}

	STATIC CLCDGRAPHPARTIALSTYLE LcdGraphOptionsToLcdGraphPartialStyle(CLCDGRAPHOPTIONS lcdGraphOptions)
	{
		return static_cast<CLCDGRAPHPARTIALSTYLE>(HIGH_NYBBLE(
			MASK((CBYTE)lcdGraphOptions, LCD_GRAPH_PARTIAL_CELL_STYLE_MASK)));
	}

	STATIC CLCDSPACETYLE LcdGraphOptionsToLcdSpaceStyle(CLCDGRAPHOPTIONS lcdGraphOptions)
	{
		return static_cast<CLCDSPACETYLE>(LOW_NYBBLE((CBYTE)lcdGraphOptions));
	}

#pragma endregion


#pragma region LCD SLIDER ENUMS

	enum LcdSliderMarker : BYTE
	{
		CARET_MARKER	= 0x00,
		LINE_MARKER		= 0x10,
		PLUS_MARKER		= 0x20,
		SQUARE_MARKER	= 0x30,
		DIAMOND_MARKER	= 0x40,
		DISC_MARKER		= 0x50,
		TRIANGLE_MARKER	= 0x60,
		STRIPES_MARKER	= 0x70
	};

	TYPEDEF_ENUM_ALIASES(LcdSliderMarker, LCDSLIDERMARKER);


	enum LcdSliderEnds : BYTE
	{
		NO_ENDS			= 0x00,
		NORMAL_ENDS		= 0x80
	};

	TYPEDEF_ENUM_ALIASES(LcdSliderEnds, LCDSLIDERENDS);


	ENUM LcdSliderOptions : BYTE
	{
		CARET					= CARET_MARKER BOR EMPTY_SPACE,
		CARET_DASH				= CARET_MARKER BOR DASH_SPACE,
		CARET_PLUS				= CARET_MARKER BOR PLUS_SPACE,
		CARET_SQUARE			= CARET_MARKER BOR SQUARE_SPACE,
		CARET_DIAMOND			= CARET_MARKER BOR DIAMOND_SPACE,
		CARET_CIRCLE			= CARET_MARKER BOR CIRCLE_SPACE,
		CARET_LINES				= CARET_MARKER BOR LINES_SPACE,
		CARET_DOTS				= CARET_MARKER BOR DOTS_SPACE,

		CARET_ENDS				= CARET_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		CARET_DASH_ENDS			= CARET_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		CARET_PLUS_ENDS			= CARET_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		CARET_SQUARE_ENDS		= CARET_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		CARET_DIAMOND_ENDS		= CARET_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		CARET_CIRCLE_ENDS		= CARET_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		CARET_LINES_ENDS		= CARET_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		CARET_DOTS_ENDS			= CARET_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		LINE					= LINE_MARKER BOR EMPTY_SPACE,
		LINE_DASH				= LINE_MARKER BOR DASH_SPACE,
		LINE_PLUS				= LINE_MARKER BOR PLUS_SPACE,
		LINE_SQUARE				= LINE_MARKER BOR SQUARE_SPACE,
		LINE_DIAMOND			= LINE_MARKER BOR DIAMOND_SPACE,
		LINE_CIRCLE				= LINE_MARKER BOR CIRCLE_SPACE,
		LINE_LINES				= LINE_MARKER BOR LINES_SPACE,
		LINES					= LINE_LINES,
		LINE_DOTS				= LINE_MARKER BOR DOTS_SPACE,

		LINE_ENDS				= LINE_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		LINE_DASH_ENDS			= LINE_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		LINE_PLUS_ENDS			= LINE_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		LINE_SQUARE_ENDS		= LINE_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		LINE_DIAMOND_ENDS		= LINE_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		LINE_CIRCLE_ENDS		= LINE_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		LINE_LINES_ENDS			= LINE_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		LINES_ENDS				= LINE_LINES_ENDS,
		LINE_DOTS_ENDS			= LINE_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		PLUS					= PLUS_MARKER BOR EMPTY_SPACE,
		PLUS_DASH				= PLUS_MARKER BOR DASH_SPACE,
		//PLUS_PLUS				= PLUS_MARKER BOR PLUS_SPACE,
		PLUS_SQUARE				= PLUS_MARKER BOR SQUARE_SPACE,
		PLUS_DIAMOND			= PLUS_MARKER BOR DIAMOND_SPACE,
		PLUS_CIRCLE				= PLUS_MARKER BOR CIRCLE_SPACE,
		PLUS_LINES				= PLUS_MARKER BOR LINES_SPACE,
		PLUS_DOTS				= PLUS_MARKER BOR DOTS_SPACE,

		PLUS_ENDS				= PLUS_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		PLUS_DASH_ENDS			= PLUS_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		//PLUS_PLUS_ENDS			= PLUS_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		PLUS_SQUARE_ENDS		= PLUS_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		PLUS_DIAMOND_ENDS		= PLUS_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		PLUS_CIRCLE_ENDS		= PLUS_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		PLUS_LINES_ENDS			= PLUS_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		PLUS_DOTS_ENDS			= PLUS_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		SQUARE					= SQUARE_MARKER BOR EMPTY_SPACE,
		SQUARE_DASH				= SQUARE_MARKER BOR DASH_SPACE,
		SQUARE_PLUS				= SQUARE_MARKER BOR PLUS_SPACE,
		SQUARE_SQUARE			= SQUARE_MARKER BOR SQUARE_SPACE,
		SQUARES					= SQUARE_SQUARE,
		SQUARE_DIAMOND			= SQUARE_MARKER BOR DIAMOND_SPACE,
		SQUARE_CIRCLE			= SQUARE_MARKER BOR CIRCLE_SPACE,
		SQUARE_LINES			= SQUARE_MARKER BOR LINES_SPACE,
		SQUARE_DOTS				= SQUARE_MARKER BOR DOTS_SPACE,

		SQUARE_ENDS				= SQUARE_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		SQUARE_DASH_ENDS		= SQUARE_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		SQUARE_PLUS_ENDS		= SQUARE_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		SQUARE_SQUARE_ENDS		= SQUARE_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		SQUARES_ENDS			= SQUARE_SQUARE_ENDS,
		SQUARE_DIAMOND_ENDS		= SQUARE_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		SQUARE_CIRCLE_ENDS		= SQUARE_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		SQUARE_LINES_ENDS		= SQUARE_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		SQUARE_DOTS_ENDS		= SQUARE_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		DIAMOND					= DIAMOND_MARKER BOR EMPTY_SPACE,
		DIAMOND_DASH			= DIAMOND_MARKER BOR DASH_SPACE,
		DIAMOND_PLUS			= DIAMOND_MARKER BOR PLUS_SPACE,
		DIAMOND_SQUARE			= DIAMOND_MARKER BOR SQUARE_SPACE,
		DIAMOND_DIAMOND			= DIAMOND_MARKER BOR DIAMOND_SPACE,
		DIAMONDS				= DIAMOND_DIAMOND,
		DIAMOND_CIRCLE			= DIAMOND_MARKER BOR CIRCLE_SPACE,
		DIAMOND_LINES			= DIAMOND_MARKER BOR LINES_SPACE,
		DIAMOND_DOTS			= DIAMOND_MARKER BOR DOTS_SPACE,

		DIAMOND_ENDS			= DIAMOND_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		DIAMOND_DASH_ENDS		= DIAMOND_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		DIAMOND_PLUS_ENDS		= DIAMOND_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		DIAMOND_SQUARE_ENDS		= DIAMOND_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		DIAMOND_DIAMOND_ENDS	= DIAMOND_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		DIAMONDS_ENDS			= DIAMOND_DIAMOND_ENDS,
		DIAMOND_CIRCLE_ENDS		= DIAMOND_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		DIAMOND_LINES_ENDS		= DIAMOND_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		DIAMOND_DOTS_ENDS		= DIAMOND_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		DISC					= DISC_MARKER BOR EMPTY_SPACE,
		DISC_DASH				= DISC_MARKER BOR DASH_SPACE,
		DISC_PLUS				= DISC_MARKER BOR PLUS_SPACE,
		DISC_SQUARE				= DISC_MARKER BOR SQUARE_SPACE,
		DISC_DIAMOND			= DISC_MARKER BOR DIAMOND_SPACE,
		DISC_CIRCLE				= DISC_MARKER BOR CIRCLE_SPACE,
		CIRCLES					= DISC_CIRCLE,
		DISC_LINES				= DISC_MARKER BOR LINES_SPACE,
		DISC_DOTS				= DISC_MARKER BOR DOTS_SPACE,

		DISC_ENDS				= DISC_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		DISC_DASH_ENDS			= DISC_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		DISC_PLUS_ENDS			= DISC_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		DISC_SQUARE_ENDS		= DISC_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		DISC_DIAMOND_ENDS		= DISC_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		DISC_CIRCLE_ENDS		= DISC_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		CIRCLES_ENDS			= DISC_CIRCLE_ENDS,
		DISC_LINES_ENDS			= DISC_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		DISC_DOTS_ENDS			= DISC_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		TRIANGLE				= TRIANGLE_MARKER BOR EMPTY_SPACE,
		TRIANGLE_DASH			= TRIANGLE_MARKER BOR DASH_SPACE,
		TRIANGLE_PLUS			= TRIANGLE_MARKER BOR PLUS_SPACE,
		TRIANGLE_SQUARE			= TRIANGLE_MARKER BOR SQUARE_SPACE,
		TRIANGLE_DIAMOND		= TRIANGLE_MARKER BOR DIAMOND_SPACE,
		TRIANGLE_CIRCLE			= TRIANGLE_MARKER BOR CIRCLE_SPACE,
		TRIANGLE_LINES			= TRIANGLE_MARKER BOR LINES_SPACE,
		TRIANGLE_DOTS			= TRIANGLE_MARKER BOR DOTS_SPACE,

		TRIANGLE_ENDS			= TRIANGLE_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		TRIANGLE_DASH_ENDS		= TRIANGLE_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		TRIANGLE_PLUS_ENDS		= TRIANGLE_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		TRIANGLE_SQUARE_ENDS	= TRIANGLE_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		TRIANGLE_DIAMOND_ENDS	= TRIANGLE_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		TRIANGLE_CIRCLE_ENDS	= TRIANGLE_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		TRIANGLE_LINES_ENDS		= TRIANGLE_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		TRIANGLE_DOTS_ENDS		= TRIANGLE_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS,

		STRIPES					= STRIPES_MARKER BOR EMPTY_SPACE,
		STRIPES_DASH			= STRIPES_MARKER BOR DASH_SPACE,
		STRIPES_PLUS			= STRIPES_MARKER BOR PLUS_SPACE,
		STRIPES_SQUARE			= STRIPES_MARKER BOR SQUARE_SPACE,
		STRIPES_DIAMOND			= STRIPES_MARKER BOR DIAMOND_SPACE,
		STRIPES_CIRCLE			= STRIPES_MARKER BOR CIRCLE_SPACE,
		STRIPES_LINES			= STRIPES_MARKER BOR LINES_SPACE,
		STRIPES_DOTS			= STRIPES_MARKER BOR DOTS_SPACE,

		STRIPES_ENDS			= STRIPES_MARKER BOR EMPTY_SPACE BOR NORMAL_ENDS,
		STRIPES_DASH_ENDS		= STRIPES_MARKER BOR DASH_SPACE BOR NORMAL_ENDS,
		STRIPES_PLUS_ENDS		= STRIPES_MARKER BOR PLUS_SPACE BOR NORMAL_ENDS,
		STRIPES_SQUARE_ENDS		= STRIPES_MARKER BOR SQUARE_SPACE BOR NORMAL_ENDS,
		STRIPES_DIAMOND_ENDS	= STRIPES_MARKER BOR DIAMOND_SPACE BOR NORMAL_ENDS,
		STRIPES_CIRCLE_ENDS		= STRIPES_MARKER BOR CIRCLE_SPACE BOR NORMAL_ENDS,
		STRIPES_LINES_ENDS		= STRIPES_MARKER BOR LINES_SPACE BOR NORMAL_ENDS,
		STRIPES_DOTS_ENDS		= STRIPES_MARKER BOR DOTS_SPACE BOR NORMAL_ENDS
	};

	TYPEDEF_ENUM_ALIASES(LcdSliderOptions, LCDSLIDEROPTIONS);


	#define LCD_SLIDER_ENDS_MASK	0x80

	STATIC CLCDSLIDERMARKER LcdSliderOptionsToLcdSliderMarker(CLCDSLIDEROPTIONS lcdSliderOptions)
	{
		return static_cast<CLCDSLIDERMARKER>(HIGH_NYBBLE(
			INVERSE_MASK((CBYTE)lcdSliderOptions, (CBYTE)LCD_SLIDER_ENDS_MASK)));
	}

	STATIC CLCDSLIDERENDS LcdSliderOptionsToLcdSliderEnds(CLCDSLIDEROPTIONS lcdSliderOptions)
	{
		return static_cast<CLCDSLIDERENDS>(HIGH_NYBBLE(
			MASK((CBYTE)lcdSliderOptions, LCD_SLIDER_ENDS_MASK)));
	}

	STATIC CLCDSPACETYLE LcdSliderOptionsToLcdSpaceStyle(CLCDSLIDEROPTIONS lcdSliderOptions)
	{
		return static_cast<CLCDSPACETYLE>(LOW_NYBBLE((CBYTE)lcdSliderOptions));
	}

#pragma endregion


#pragma region LCD FUNCTION CONSTANT DECLARATIONS

	EXTERN CBYTE LCD_CELL_MASKS_SEMI[3][3];

#pragma endregion


#pragma region LCD FUNCTION DECLARATIONS

	VOID LCD_LoadBigFont();

	PBYTE LCD_CreateInvertedChar(PBYTE);
	PBYTE LCD_CreateInvertedChar_P(PCCHAR);

	VOID LCD_LoadInvertedChar(BYTE, PBYTE);
	VOID LCD_LoadInvertedChar_P(BYTE, PCCHAR);

	VOID LCD_DrawScrollBar(BYTE, CLCDSCROLLBAROPTIONS = LcdScrollBarOptions::LINE);
	VOID LCD_DrawGraph(BYTE, BYTE, BYTE, BYTE, CLCDGRAPHOPTIONS = LcdGraphOptions::BAR);
	VOID LCD_DrawSlider(BYTE, BYTE, BYTE, BYTE, CLCDSLIDEROPTIONS = LcdSliderOptions::CARET);

#pragma endregion
};

#endif
